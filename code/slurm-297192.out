Thu Mar  2 11:59:18 2023       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 465.19.01    Driver Version: 465.19.01    CUDA Version: 11.3     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA GeForce ...  On   | 00000000:01:00.0 Off |                  N/A |
| 39%   33C    P8    32W / 350W |      1MiB / 24268MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   1  NVIDIA GeForce ...  On   | 00000000:25:00.0 Off |                  N/A |
| 38%   33C    P8    20W / 350W |      1MiB / 24268MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   2  NVIDIA GeForce ...  On   | 00000000:41:00.0 Off |                  N/A |
| 39%   33C    P8    21W / 350W |      1MiB / 24268MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
|   3  NVIDIA GeForce ...  On   | 00000000:61:00.0 Off |                  N/A |
| 38%   31C    P8    19W / 350W |      1MiB / 24268MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2022 NVIDIA Corporation
Built on Wed_Jun__8_16:49:14_PDT_2022
Cuda compilation tools, release 11.7, V11.7.99
Build cuda_11.7.r11.7/compiler.31442593_0
03/02/2023 11:59:36 - INFO - __main__ -   Namespace(adam_epsilon=1e-08, beam_size=5, config_name='Salesforce/codet5-base', dev_filename='/home/ysnamgoong42/ws/XLCoST/g4g/XLCoST_data/pair_data_tok_full_desc_comment/Python-desc/val-Python-desc-tok.txt,/home/ysnamgoong42/ws/XLCoST/g4g/XLCoST_data/pair_data_tok_full_desc_comment/Python-desc/val-Python-desc-tok.py', do_eval=True, do_lower_case=False, do_test=False, do_train=True, eval_batch_size=16, eval_steps=2500, gradient_accumulation_steps=1, learning_rate=5e-05, load_model_path=None, local_rank=-1, max_grad_norm=1.0, max_source_length=400, max_steps=-1, max_target_length=400, model_name_or_path='Salesforce/codet5-base', model_type='codet5', no_cuda=False, num_train_epochs=10.0, output_dir='/home/ysnamgoong42/ws/XLCoST/codet5_nl_pl_program/desc-Python', seed=42, test_filename=None, tokenizer_name='Salesforce/codet5-base', train_batch_size=16, train_filename='/home/ysnamgoong42/ws/XLCoST/g4g/XLCoST_data/pair_data_tok_full_desc_comment/Python-desc/train-Python-desc-tok.txt,/home/ysnamgoong42/ws/XLCoST/g4g/XLCoST_data/pair_data_tok_full_desc_comment/Python-desc/train-Python-desc-tok.py', train_steps=5000, warmup_steps=0, weight_decay=0.0)
03/02/2023 11:59:36 - WARNING - __main__ -   Process rank: -1, device: cuda, n_gpu: 4, distributed training: False
03/02/2023 11:59:52 - INFO - __main__ -   *** Example ***
03/02/2023 11:59:52 - INFO - __main__ -   idx: 0
03/02/2023 11:59:52 - INFO - __main__ -   source_tokens: ['<s>', 'Maximum', '_Prefix', '_Sum', '_possible', '_by', '_merging', '_two', '_given', '_arrays', '_|', '_Python', '3', '_implementation', '_of', '_the', '_above', '_approach', '_;', '_Sto', 'res', '_the', '_maximum', '_prefix', '_sum', '_of', '_the', '_array', '_A', '_[', '_]', '_;', '_Tra', 'verse', '_the', '_array', '_A', '_[', '_]', '_;', '_Sto', 'res', '_the', '_maximum', '_prefix', '_sum', '_of', '_the', '_array', '_B', '_[', '_]', '_;', '_Tra', 'verse', '_the', '_array', '_B', '_[', '_]', '_;', '_Driver', '_code', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   source_ids: 1 13528 10139 9352 3323 635 17256 2795 864 5352 571 6600 23 4471 434 326 5721 17504 274 20296 455 326 4207 1633 2142 434 326 526 432 306 308 274 2197 2476 326 526 432 306 308 274 20296 455 326 4207 1633 2142 434 326 526 605 306 308 274 2197 2476 326 526 605 306 308 274 9396 981 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   target_tokens: ['<s>', 'def', '_max', 'Pres', 'um', '_(', '_a', '_,', '_b', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_X', '_=', '_max', '_(', '_a', '_[', '_0', '_]', '_,', '_0', '_)', '_NEW', '_', 'LINE', '_for', '_i', '_in', '_range', '_(', '_1', '_,', '_len', '_(', '_a', '_)', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_a', '_[', '_i', '_]', '_+=', '_a', '_[', '_i', '_-', '_1', '_]', '_NEW', '_', 'LINE', '_X', '_=', '_max', '_(', '_X', '_,', '_a', '_[', '_i', '_]', '_)', '_NEW', '_', 'LINE', '_DE', 'DENT', '_Y', '_=', '_max', '_(', '_b', '_[', '_0', '_]', '_,', '_0', '_)', '_NEW', '_', 'LINE', '_for', '_i', '_in', '_range', '_(', '_1', '_,', '_len', '_(', '_b', '_)', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_b', '_[', '_i', '_]', '_+=', '_b', '_[', '_i', '_-', '_1', '_]', '_NEW', '_', 'LINE', '_Y', '_=', '_max', '_(', '_Y', '_,', '_b', '_[', '_i', '_]', '_)', '_NEW', '_', 'LINE', '_DE', 'DENT', '_return', '_X', '_+', '_Y', '_NEW', '_', 'LINE', '_DE', 'DENT', '_A', '_=', '_[', '_2', '_,', '_-', '_1', '_,', '_4', '_,', '_-', '_5', '_]', '_NEW', '_', 'LINE', '_B', '_=', '_[', '_4', '_,', '_-', '_3', '_,', '_12', '_,', '_4', '_,', '_-', '_3', '_]', '_NEW', '_', 'LINE', '_print', '_(', '_max', 'Pres', 'um', '_(', '_A', '_,', '_B', '_)', '_)', '_NEW', '_', 'LINE', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   target_ids: 1 536 943 12236 379 261 279 269 324 262 294 12887 67 5997 30009 1139 273 943 261 279 306 374 308 269 374 262 12887 67 5997 364 277 316 1048 261 404 269 562 261 279 262 262 294 12887 67 5997 30009 279 306 277 308 1011 279 306 277 300 404 308 12887 67 5997 1139 273 943 261 1139 269 279 306 277 308 262 12887 67 5997 2030 18981 1624 273 943 261 324 306 374 308 269 374 262 12887 67 5997 364 277 316 1048 261 404 269 562 261 324 262 262 294 12887 67 5997 30009 324 306 277 308 1011 324 306 277 300 404 308 12887 67 5997 1624 273 943 261 1624 269 324 306 277 308 262 12887 67 5997 2030 18981 327 1139 397 1624 12887 67 5997 2030 18981 432 273 306 576 269 300 404 269 1059 269 300 1381 308 12887 67 5997 605 273 306 1059 269 300 890 269 2593 269 1059 269 300 890 308 12887 67 5997 1172 261 943 12236 379 261 432 269 605 262 262 12887 67 5997 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   *** Example ***
03/02/2023 11:59:52 - INFO - __main__ -   idx: 1
03/02/2023 11:59:52 - INFO - __main__ -   source_tokens: ['<s>', 'Check', '_if', '_a', '_number', '_can', '_be', '_represented', '_as', '_sum', '_of', '_two', '_positive', '_perfect', '_c', 'ubes', '_|', '_Python', '3', '_program', '_for', '_the', '_above', '_approach', '_;', '_Function', '_to', '_check', '_if', '_N', '_can', '_be', '_represented', '_as', '_sum', '_of', '_two', '_perfect', '_c', 'ubes', '_or', '_not', '_;', '_If', '_it', '_is', '_same', '_return', '_true', '_;', '_;', '_If', '_the', '_curr', '_smaller', '_than', '_n', '_increment', '_the', '_lo', '_;', '_If', '_the', '_curr', '_is', '_greater', '_than', '_curr', '_decrement', '_the', '_hi', '_;', '_Driver', '_Code', '_;', '_Function', '_call', '_to', '_check', '_if', '_N', '_can', '_be', '_represented', '_as', '_sum', '_of', '_two', '_perfect', '_c', 'ubes', '_or', '_not', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   source_ids: 1 1564 309 279 1300 848 506 10584 487 2142 434 2795 6895 24746 276 23317 571 6600 23 5402 364 326 5721 17504 274 4284 358 866 309 423 848 506 10584 487 2142 434 2795 24746 276 23317 578 486 274 971 518 353 1967 327 638 274 274 971 326 4306 10648 2353 290 5504 326 437 274 971 326 4306 353 6802 2353 4306 15267 326 10118 274 9396 3356 274 4284 745 358 866 309 423 848 506 10584 487 2142 434 2795 24746 276 23317 578 486 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   target_tokens: ['<s>', 'import', '_math', '_NEW', '_', 'LINE', '_def', '_sum', 'Of', 'Two', 'C', 'ubes', '_(', '_n', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_lo', '_=', '_1', '_NEW', '_', 'LINE', '_hi', '_=', '_round', '_(', '_math', '_.', '_pow', '_(', '_n', '_,', '_1', '_/', '_3', '_)', '_)', '_NEW', '_', 'LINE', '_while', '_(', '_lo', '_<=', '_hi', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_curr', '_=', '_(', '_lo', '_*', '_lo', '_*', '_lo', '_+', '_hi', '_*', '_hi', '_*', '_hi', '_)', '_NEW', '_', 'LINE', '_if', '_(', '_curr', '_==', '_n', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_return', '_True', '_NEW', '_', 'LINE', '_DE', 'DENT', '_if', '_(', '_curr', '_<', '_n', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_lo', '_+=', '_1', '_NEW', '_', 'LINE', '_DE', 'DENT', '_else', '_:', '_NEW', '_', 'LINE', '_INDENT', '_hi', '_-=', '_1', '_NEW', '_', 'LINE', '_DE', 'DENT', '_DE', 'DENT', '_return', '_False', '_NEW', '_', 'LINE', '_DE', 'DENT', '_N', '_=', '_28', '_NEW', '_', 'LINE', '_if', '_(', '_sum', 'Of', 'Two', 'C', 'ubes', '_(', '_N', '_)', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_print', '_(', '_"', '_True', '_"', '_)', '_NEW', '_', 'LINE', '_DE', 'DENT', '_else', '_:', '_NEW', '_', 'LINE', '_INDENT', '_print', '_(', '_"', '_False', '_"', '_)', '_NEW', '_', 'LINE', '_DE', 'DENT', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   target_ids: 1 5666 4233 12887 67 5997 1652 2142 951 11710 39 23317 261 290 262 294 12887 67 5997 30009 437 273 404 12887 67 5997 10118 273 3643 261 4233 263 7602 261 290 269 404 342 890 262 262 12887 67 5997 1323 261 437 1648 10118 262 294 12887 67 5997 30009 4306 273 261 437 380 437 380 437 397 10118 380 10118 380 10118 262 12887 67 5997 309 261 4306 422 290 262 294 12887 67 5997 30009 327 1053 12887 67 5997 2030 18981 309 261 4306 411 290 262 294 12887 67 5997 30009 437 1011 404 12887 67 5997 2030 18981 469 294 12887 67 5997 30009 10118 3947 404 12887 67 5997 2030 18981 2030 18981 327 1083 12887 67 5997 2030 18981 423 273 9131 12887 67 5997 309 261 2142 951 11710 39 23317 261 423 262 262 294 12887 67 5997 30009 1172 261 315 1053 315 262 12887 67 5997 2030 18981 469 294 12887 67 5997 30009 1172 261 315 1083 315 262 12887 67 5997 2030 18981 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   *** Example ***
03/02/2023 11:59:52 - INFO - __main__ -   idx: 2
03/02/2023 11:59:52 - INFO - __main__ -   source_tokens: ['<s>', 'Generate', '_an', '_N', '_|', '_Python', '3', '_program', '_for', '_the', '_above', '_approach', '_;', '_Function', '_to', '_generate', '_all', '_prime', '_numbers', '_u', 'pto', '_10', '_^', '_6', '_;', '_Initialize', '_s', 'ieve', '_[', '_]', '_as', '_1', '_;', '_Iterate', '_over', '_the', '_range', '_[', '_2', '_,', '_N', '_]', '_;', '_If', '_current', '_element', '_is', '_non', '_-', '_prime', '_;', '_Make', '_all', '_multi', 'ples', '_of', '_i', '_as', '_0', '_;', '_Function', '_to', '_construct', '_an', '_array', '_A', '_[', '_]', '_satisf', 'ying', '_the', '_given', '_conditions', '_;', '_Sto', 'res', '_the', '_result', 'ant', '_array', '_;', '_Sto', 'res', '_all', '_prime', '_numbers', '_;', '_S', 'ieve', '_of', '_E', 'ra', 'st', 'ost', 'h', 'en', 'es', '_;', '_Append', '_the', '_integer', '_i', '_if', '_it', '_is', '_a', '_prime', '_;', '_Indicates', '_current', '_position', '_in', '_list', '_of', '_prime', '_numbers', '_;', '_Tra', 'verse', '_the', '_array', '_arr', '_[', '_]', '_;', '_If', '_already', '_filled', '_with', '_another', '_prime', '_number', '_;', '_If', '_A', '_[', '_i', '_]', '_is', '_not', '_filled', '_but', '_A', '_[', '_ind', '_]', '_is', '_filled', '_;', '_Store', '_A', '_[', '_i', '_]', '_=', '_A', '_[', '_ind', '_]', '_;', '_If', '_none', '_of', '_them', '_were', '_filled', '_;', '_To', '_make', '_sure', '_A', '_[', '_i', '_]', '_does', '_not', '_affect', '_other', '_values', '_,', '_store', '_next', '_prime', '_number', '_;', '_Print', '_the', '_result', 'ant', '_array', '_;', '_Driver', '_Code', '_;', '_Function', '_Call', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   source_ids: 1 4625 392 423 571 6600 23 5402 364 326 5721 17504 274 4284 358 2103 777 17014 5600 582 21910 1728 3602 1666 274 9190 272 21271 306 308 487 404 274 11436 1879 326 1048 306 576 269 423 308 274 971 783 930 353 1661 300 17014 274 4344 777 3309 6089 434 277 487 374 274 4284 358 4872 392 526 432 306 308 9281 14946 326 864 4636 274 20296 455 326 563 970 526 274 20296 455 777 17014 5600 274 348 21271 434 512 354 334 669 76 275 281 274 6181 326 3571 277 309 518 353 279 17014 274 18336 783 1754 316 666 434 17014 5600 274 2197 2476 326 526 2454 306 308 274 971 1818 6300 598 4042 17014 1300 274 971 432 306 277 308 353 486 6300 1496 432 306 1547 308 353 6300 274 4994 432 306 277 308 273 432 306 1547 308 274 971 6555 434 2182 4591 6300 274 2974 1221 3071 432 306 277 308 1552 486 13418 1308 924 269 1707 1024 17014 1300 274 3038 326 563 970 526 274 9396 3356 274 4284 3049 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   target_tokens: ['<s>', 's', 'ieve', '_=', '_[', '_1', '_]', '_*', '_(', '_1000000', '_+', '_1', '_)', '_NEW', '_', 'LINE', '_def', '_s', 'ieve', 'Of', 'Pr', 'imes', '_(', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_global', '_s', 'ieve', '_NEW', '_', 'LINE', '_N', '_=', '_1000000', '_NEW', '_', 'LINE', '_for', '_i', '_in', '_range', '_(', '_2', '_,', '_N', '_+', '_1', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_if', '_i', '_*', '_i', '_>', '_N', '_:', '_NEW', '_', 'LINE', '_INDENT', '_break', '_NEW', '_', 'LINE', '_DE', 'DENT', '_if', '_(', '_s', 'ieve', '_[', '_i', '_]', '_==', '_0', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_continue', '_NEW', '_', 'LINE', '_DE', 'DENT', '_for', '_j', '_in', '_range', '_(', '_i', '_*', '_i', '_,', '_N', '_+', '_1', '_,', '_i', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_s', 'ieve', '_[', '_j', '_]', '_=', '_0', '_NEW', '_', 'LINE', '_DE', 'DENT', '_DE', 'DENT', '_DE', 'DENT', '_def', '_getArray', '_(', '_arr', '_,', '_N', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_global', '_s', 'ieve', '_NEW', '_', 'LINE', '_A', '_=', '_[', '_0', '_]', '_*', '_N', '_NEW', '_', 'LINE', '_v', '_=', '_[', '_]', '_NEW', '_', 'LINE', '_s', 'ieve', 'Of', 'Pr', 'imes', '_(', '_)', '_NEW', '_', 'LINE', '_for', '_i', '_in', '_range', '_(', '_2', '_,', '_int', '_(', '_1', 'e', '5', '_)', '_+', '_1', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_if', '_(', '_s', 'ieve', '_[', '_i', '_]', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_v', '_.', '_append', '_(', '_i', '_)', '_NEW', '_', 'LINE', '_DE', 'DENT', '_DE', 'DENT', '_j', '_=', '_0', '_NEW', '_', 'LINE', '_for', '_i', '_in', '_range', '_(', '_N', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_ind', '_=', '_arr', '_[', '_i', '_]', '_NEW', '_', 'LINE', '_if', '_(', '_A', '_[', '_i', '_]', '_!=', '_0', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_continue', '_NEW', '_', 'LINE', '_DE', 'DENT', '_elif', '_(', '_A', '_[', '_ind', '_]', '_!=', '_0', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_A', '_[', '_i', '_]', '_=', '_A', '_[', '_ind', '_]', '_NEW', '_', 'LINE', '_DE', 'DENT', '_else', '_:', '_NEW', '_', 'LINE', '_INDENT', '_prime', '_=', '_v', '_[', '_j', '_]', '_NEW', '_', 'LINE', '_A', '_[', '_i', '_]', '_=', '_prime', '_NEW', '_', 'LINE', '_A', '_[', '_ind', '_]', '_=', '_A', '_[', '_i', '_]', '_NEW', '_', 'LINE', '_j', '_+=', '_1', '_NEW', '_', 'LINE', '_DE', 'DENT', '_DE', 'DENT', '_for', '_i', '_in', '_range', '_(', '_N', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_print', '_(', '_A', '_[', '_i', '_]', '_,', '_end', '_=', '_"', '_', 'â', 'ĸ', 'ģ', '_"', '_)', '_NEW', '_', 'LINE', '_DE', 'DENT', '_DE', 'DENT', '_if', '___', 'name', '__', '_==', "_'", '__', '__', '_main', '__', '__', "_'", '_:', '_NEW', '_', 'LINE', '_INDENT', '_arr', '_=', '_[', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   target_ids: 1 87 21271 273 306 404 308 380 261 15088 397 404 262 12887 67 5997 1652 272 21271 951 2050 4485 261 262 294 12887 67 5997 30009 2552 272 21271 12887 67 5997 423 273 15088 12887 67 5997 364 277 316 1048 261 576 269 423 397 404 262 294 12887 67 5997 30009 309 277 380 277 405 423 294 12887 67 5997 30009 898 12887 67 5997 2030 18981 309 261 272 21271 306 277 308 422 374 262 294 12887 67 5997 30009 1324 12887 67 5997 2030 18981 364 525 316 1048 261 277 380 277 269 423 397 404 269 277 262 294 12887 67 5997 30009 272 21271 306 525 308 273 374 12887 67 5997 2030 18981 2030 18981 2030 18981 1652 12634 261 2454 269 423 262 294 12887 67 5997 30009 2552 272 21271 12887 67 5997 432 273 306 374 308 380 423 12887 67 5997 331 273 306 308 12887 67 5997 272 21271 951 2050 4485 261 262 12887 67 5997 364 277 316 1048 261 576 269 509 261 404 73 25 262 397 404 262 294 12887 67 5997 30009 309 261 272 21271 306 277 308 262 294 12887 67 5997 30009 331 263 714 261 277 262 12887 67 5997 2030 18981 2030 18981 525 273 374 12887 67 5997 364 277 316 1048 261 423 262 294 12887 67 5997 30009 1547 273 2454 306 277 308 12887 67 5997 309 261 432 306 277 308 480 374 262 294 12887 67 5997 30009 1324 12887 67 5997 2030 18981 1327 261 432 306 1547 308 480 374 262 294 12887 67 5997 30009 432 306 277 308 273 432 306 1547 308 12887 67 5997 2030 18981 469 294 12887 67 5997 30009 17014 273 331 306 525 308 12887 67 5997 432 306 277 308 273 17014 12887 67 5997 432 306 1547 308 273 432 306 277 308 12887 67 5997 525 1011 404 12887 67 5997 2030 18981 2030 18981 364 277 316 1048 261 423 262 294 12887 67 5997 30009 1172 261 432 306 277 308 269 679 273 315 225 163 249 228 315 262 12887 67 5997 2030 18981 2030 18981 309 1001 529 972 422 296 389 389 2774 389 389 296 294 12887 67 5997 30009 2454 273 306 2
03/02/2023 11:59:52 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
03/02/2023 11:59:52 - INFO - __main__ -   *** Example ***
03/02/2023 11:59:52 - INFO - __main__ -   idx: 3
03/02/2023 11:59:52 - INFO - __main__ -   source_tokens: ['<s>', 'N', 'th', '_natural', '_number', '_after', '_removing', '_all', '_numbers', '_consisting', '_of', '_the', '_digit', '_9', '_|', '_Function', '_to', '_find', '_N', 'th', '_number', '_in', '_base', '_9', '_;', '_Sto', 'res', '_the', '_N', 'th', '_number', '_;', '_Iterate', '_while', '_N', '_is', '_greater', '_than', '_0', '_;', '_Update', '_result', '_;', '_Div', 'ide', '_N', '_by', '_9', '_;', '_Multi', 'ply', '_p', '_by', '_10', '_;', '_Return', '_result', '_;', '_Driver', '_Code', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   source_ids: 1 50 451 15145 1300 1839 9427 777 5600 23570 434 326 8035 2468 571 4284 358 1104 423 451 1300 316 1026 2468 274 20296 455 326 423 451 1300 274 11436 1323 423 353 6802 2353 374 274 2315 563 274 21411 831 423 635 2468 274 5991 1283 293 635 1728 274 2000 563 274 9396 3356 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   target_tokens: ['<s>', 'def', '_find', 'N', 'th', 'Number', '_(', '_N', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_result', '_=', '_0', '_NEW', '_', 'LINE', '_p', '_=', '_1', '_NEW', '_', 'LINE', '_while', '_(', '_N', '_>', '_0', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_result', '_+=', '_(', '_p', '_*', '_(', '_N', '_%', '_9', '_)', '_)', '_NEW', '_', 'LINE', '_N', '_=', '_N', '_//', '_9', '_NEW', '_', 'LINE', '_p', '_=', '_p', '_*', '_10', '_NEW', '_', 'LINE', '_DE', 'DENT', '_return', '_result', '_NEW', '_', 'LINE', '_DE', 'DENT', '_if', '___', 'name', '__', '_==', "_'", '__', '__', '_main', '__', '__', "_'", '_:', '_NEW', '_', 'LINE', '_INDENT', '_N', '_=', '_9', '_NEW', '_', 'LINE', '_print', '_(', '_find', 'N', 'th', 'Number', '_(', '_N', '_)', '_)', '_NEW', '_', 'LINE', '_DE', 'DENT', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   target_ids: 1 536 1104 50 451 1854 261 423 262 294 12887 67 5997 30009 563 273 374 12887 67 5997 293 273 404 12887 67 5997 1323 261 423 405 374 262 294 12887 67 5997 30009 563 1011 261 293 380 261 423 738 2468 262 262 12887 67 5997 423 273 423 368 2468 12887 67 5997 293 273 293 380 1728 12887 67 5997 2030 18981 327 563 12887 67 5997 2030 18981 309 1001 529 972 422 296 389 389 2774 389 389 296 294 12887 67 5997 30009 423 273 2468 12887 67 5997 1172 261 1104 50 451 1854 261 423 262 262 12887 67 5997 2030 18981 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   *** Example ***
03/02/2023 11:59:52 - INFO - __main__ -   idx: 4
03/02/2023 11:59:52 - INFO - __main__ -   source_tokens: ['<s>', 'Check', '_if', '_an', '_integer', '_is', '_rotation', '_of', '_another', '_given', '_integer', '_|', '_Python', '3', '_implementation', '_of', '_the', '_approach', '_;', '_Function', '_to', '_check', '_if', '_the', '_integer', '_A', '_is', '_a', '_rotation', '_of', '_the', '_integer', '_B', '_;', '_Sto', 'res', '_the', '_count', '_of', '_digits', '_in', '_A', '_;', '_Sto', 'res', '_the', '_count', '_of', '_digits', '_in', '_B', '_;', '_If', '_dig', '1', '_not', '_equal', '_to', '_dig', '2', '_;', '_Sto', 'res', '_position', '_of', '_first', '_digit', '_;', '_Sto', 'res', '_the', '_first', '_digit', '_;', '_Rotate', '_the', '_digits', '_of', '_the', '_integer', '_;', '_If', '_A', '_is', '_equal', '_to', '_B', '_;', '_If', '_A', '_is', '_equal', '_to', '_the', '_initial', '_value', '_of', '_integer', '_A', '_;', '_Driver', '_code', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   source_ids: 1 1564 309 392 3571 353 6752 434 4042 864 3571 571 6600 23 4471 434 326 17504 274 4284 358 866 309 326 3571 432 353 279 6752 434 326 3571 605 274 20296 455 326 1056 434 6815 316 432 274 20296 455 326 1056 434 6815 316 605 274 971 3097 21 486 3959 358 3097 22 274 20296 455 1754 434 1122 8035 274 20296 455 326 1122 8035 274 24280 326 6815 434 326 3571 274 971 432 353 3959 358 605 274 971 432 353 3959 358 326 2172 460 434 3571 432 274 9396 981 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   target_tokens: ['<s>', 'import', '_math', '_NEW', '_', 'LINE', '_def', '_check', '_(', '_A', '_,', '_B', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_if', '_(', '_A', '_==', '_B', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_return', '_1', '_NEW', '_', 'LINE', '_DE', 'DENT', '_dig', '1', '_=', '_math', '_.', '_floor', '_(', '_math', '_.', '_log', '10', '_(', '_A', '_)', '_+', '_1', '_)', '_NEW', '_', 'LINE', '_dig', '2', '_=', '_math', '_.', '_floor', '_(', '_math', '_.', '_log', '10', '_(', '_B', '_)', '_+', '_1', '_)', '_NEW', '_', 'LINE', '_if', '_(', '_dig', '1', '_!=', '_dig', '2', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_return', '_0', '_NEW', '_', 'LINE', '_DE', 'DENT', '_temp', '_=', '_A', '_NEW', '_', 'LINE', '_while', '_(', '_True', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_power', '_=', '_pow', '_(', '_10', '_,', '_dig', '1', '_-', '_1', '_)', '_NEW', '_', 'LINE', '_first', 'digit', '_=', '_A', '_//', '_power', '_NEW', '_', 'LINE', '_A', '_=', '_A', '_-', '_first', 'digit', '_*', '_power', '_NEW', '_', 'LINE', '_A', '_=', '_A', '_*', '_10', '_+', '_first', 'digit', '_NEW', '_', 'LINE', '_if', '_(', '_A', '_==', '_B', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_return', '_1', '_NEW', '_', 'LINE', '_DE', 'DENT', '_if', '_(', '_A', '_==', '_temp', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_return', '_0', '_NEW', '_', 'LINE', '_DE', 'DENT', '_DE', 'DENT', '_DE', 'DENT', '_A', '_,', '_B', '_=', '_9', '67', '_,', '_6', '79', '_NEW', '_', 'LINE', '_if', '_(', '_check', '_(', '_A', '_,', '_B', '_)', '_)', '_:', '_NEW', '_', 'LINE', '_INDENT', '_print', '_(', '_"', '_Yes', '_"', '_)', '_NEW', '_', 'LINE', '_DE', 'DENT', '_else', '_:', '_NEW', '_', 'LINE', '_INDENT', '_print', '_(', '_"', '_No', '_"', '_)', '_NEW', '_', 'LINE', '_DE', 'DENT', '</s>']
03/02/2023 11:59:52 - INFO - __main__ -   target_ids: 1 5666 4233 12887 67 5997 1652 866 261 432 269 605 262 294 12887 67 5997 30009 309 261 432 422 605 262 294 12887 67 5997 30009 327 404 12887 67 5997 2030 18981 3097 21 273 4233 263 6346 261 4233 263 613 2163 261 432 262 397 404 262 12887 67 5997 3097 22 273 4233 263 6346 261 4233 263 613 2163 261 605 262 397 404 262 12887 67 5997 309 261 3097 21 480 3097 22 262 294 12887 67 5997 30009 327 374 12887 67 5997 2030 18981 1906 273 432 12887 67 5997 1323 261 1053 262 294 12887 67 5997 30009 7212 273 7602 261 1728 269 3097 21 300 404 262 12887 67 5997 1122 11052 273 432 368 7212 12887 67 5997 432 273 432 300 1122 11052 380 7212 12887 67 5997 432 273 432 380 1728 397 1122 11052 12887 67 5997 309 261 432 422 605 262 294 12887 67 5997 30009 327 404 12887 67 5997 2030 18981 309 261 432 422 1906 262 294 12887 67 5997 30009 327 374 12887 67 5997 2030 18981 2030 18981 2030 18981 432 269 605 273 2468 9599 269 1666 7235 12887 67 5997 309 261 866 261 432 269 605 262 262 294 12887 67 5997 30009 1172 261 315 19925 315 262 12887 67 5997 2030 18981 469 294 12887 67 5997 30009 1172 261 315 2631 315 262 12887 67 5997 2030 18981 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
03/02/2023 11:59:52 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
/home/ysnamgoong42/miniconda3/envs/xlcost/lib/python3.8/site-packages/transformers/optimization.py:306: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  warnings.warn(
03/02/2023 12:00:07 - INFO - __main__ -   ***** Running training *****
03/02/2023 12:00:07 - INFO - __main__ -     Num examples = 9263
03/02/2023 12:00:07 - INFO - __main__ -     Batch size = 16
03/02/2023 12:00:07 - INFO - __main__ -     Num epoch = 9
/home/ysnamgoong42/miniconda3/envs/xlcost/lib/python3.8/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn('Was asked to gather along dimension 0, but all '
03/02/2023 12:01:49 - INFO - __main__ -     step 100 loss 1.231
03/02/2023 12:03:25 - INFO - __main__ -     step 200 loss 0.968
03/02/2023 12:05:00 - INFO - __main__ -     step 300 loss 0.8483
03/02/2023 12:06:34 - INFO - __main__ -     step 400 loss 0.7799
03/02/2023 12:08:08 - INFO - __main__ -     step 500 loss 0.733
03/02/2023 12:09:42 - INFO - __main__ -     step 600 loss 0.6964
03/02/2023 12:11:17 - INFO - __main__ -     step 700 loss 0.6656
03/02/2023 12:12:51 - INFO - __main__ -     step 800 loss 0.6434
03/02/2023 12:14:26 - INFO - __main__ -     step 900 loss 0.6245
03/02/2023 12:16:00 - INFO - __main__ -     step 1000 loss 0.6077
03/02/2023 12:17:34 - INFO - __main__ -     step 1100 loss 0.5933
03/02/2023 12:18:28 - INFO - __main__ -   
***** Running evaluation *****
03/02/2023 12:18:28 - INFO - __main__ -     Num examples = 472
03/02/2023 12:18:28 - INFO - __main__ -     Batch size = 16
03/02/2023 12:18:44 - INFO - __main__ -     eval_ppl = 1.46329
03/02/2023 12:18:44 - INFO - __main__ -     global_step = 1157
03/02/2023 12:18:44 - INFO - __main__ -     train_loss = 0.5858
03/02/2023 12:18:44 - INFO - __main__ -     ********************
03/02/2023 12:18:47 - INFO - __main__ -     Best ppl:1.46329
03/02/2023 12:18:47 - INFO - __main__ -     ********************
03/02/2023 12:37:05 - INFO - __main__ -     bleu-4 = 31.5 
03/02/2023 12:37:05 - INFO - __main__ -     xMatch = 0.0 
03/02/2023 12:37:05 - INFO - __main__ -     ********************
03/02/2023 12:37:05 - INFO - __main__ -     Best bleu:31.5
03/02/2023 12:37:05 - INFO - __main__ -     ********************
03/02/2023 12:37:49 - INFO - __main__ -     step 1200 loss 0.4269
03/02/2023 12:39:26 - INFO - __main__ -     step 1300 loss 0.4233
03/02/2023 12:41:02 - INFO - __main__ -     step 1400 loss 0.423
03/02/2023 12:42:37 - INFO - __main__ -     step 1500 loss 0.4214
03/02/2023 12:44:12 - INFO - __main__ -     step 1600 loss 0.4196
03/02/2023 12:45:48 - INFO - __main__ -     step 1700 loss 0.4163
03/02/2023 12:47:24 - INFO - __main__ -     step 1800 loss 0.4127
03/02/2023 12:48:58 - INFO - __main__ -     step 1900 loss 0.4092
03/02/2023 12:50:34 - INFO - __main__ -     step 2000 loss 0.4067
03/02/2023 12:52:09 - INFO - __main__ -     step 2100 loss 0.4043
03/02/2023 12:53:44 - INFO - __main__ -     step 2200 loss 0.4022
03/02/2023 12:55:19 - INFO - __main__ -     step 2300 loss 0.3995
03/02/2023 12:55:31 - INFO - __main__ -   
***** Running evaluation *****
03/02/2023 12:55:31 - INFO - __main__ -     Num examples = 472
03/02/2023 12:55:31 - INFO - __main__ -     Batch size = 16
03/02/2023 12:55:47 - INFO - __main__ -     eval_ppl = 1.41273
03/02/2023 12:55:47 - INFO - __main__ -     global_step = 2314
03/02/2023 12:55:47 - INFO - __main__ -     train_loss = 0.399
03/02/2023 12:55:47 - INFO - __main__ -     ********************
03/02/2023 12:55:50 - INFO - __main__ -     Best ppl:1.41273
03/02/2023 12:55:50 - INFO - __main__ -     ********************
03/02/2023 13:14:14 - INFO - __main__ -     bleu-4 = 35.18 
03/02/2023 13:14:14 - INFO - __main__ -     xMatch = 0.0 
03/02/2023 13:14:14 - INFO - __main__ -     ********************
03/02/2023 13:14:14 - INFO - __main__ -     Best bleu:35.18
03/02/2023 13:14:14 - INFO - __main__ -     ********************
03/02/2023 13:15:40 - INFO - __main__ -     step 2400 loss 0.3589
03/02/2023 13:17:16 - INFO - __main__ -     step 2500 loss 0.362
03/02/2023 13:18:50 - INFO - __main__ -     step 2600 loss 0.3627
03/02/2023 13:20:24 - INFO - __main__ -     step 2700 loss 0.3622
03/02/2023 13:21:58 - INFO - __main__ -     step 2800 loss 0.3622
03/02/2023 13:23:32 - INFO - __main__ -     step 2900 loss 0.3592
03/02/2023 13:25:06 - INFO - __main__ -     step 3000 loss 0.3565
03/02/2023 13:26:40 - INFO - __main__ -     step 3100 loss 0.3556
03/02/2023 13:28:13 - INFO - __main__ -     step 3200 loss 0.3539
03/02/2023 13:29:47 - INFO - __main__ -     step 3300 loss 0.3528
03/02/2023 13:31:21 - INFO - __main__ -     step 3400 loss 0.3515
03/02/2023 13:32:29 - INFO - __main__ -   
***** Running evaluation *****
03/02/2023 13:32:29 - INFO - __main__ -     Num examples = 472
03/02/2023 13:32:29 - INFO - __main__ -     Batch size = 16
03/02/2023 13:32:44 - INFO - __main__ -     eval_ppl = 1.39328
03/02/2023 13:32:44 - INFO - __main__ -     global_step = 3471
03/02/2023 13:32:44 - INFO - __main__ -     train_loss = 0.3504
03/02/2023 13:32:44 - INFO - __main__ -     ********************
03/02/2023 13:32:47 - INFO - __main__ -     Best ppl:1.39328
03/02/2023 13:32:47 - INFO - __main__ -     ********************
03/02/2023 13:51:11 - INFO - __main__ -     bleu-4 = 37.11 
03/02/2023 13:51:11 - INFO - __main__ -     xMatch = 0.0 
03/02/2023 13:51:11 - INFO - __main__ -     ********************
03/02/2023 13:51:11 - INFO - __main__ -     Best bleu:37.11
03/02/2023 13:51:11 - INFO - __main__ -     ********************
03/02/2023 13:51:42 - INFO - __main__ -     step 3500 loss 0.3228
03/02/2023 13:53:18 - INFO - __main__ -     step 3600 loss 0.3229
03/02/2023 13:54:55 - INFO - __main__ -     step 3700 loss 0.3276
03/02/2023 13:56:30 - INFO - __main__ -     step 3800 loss 0.3281
03/02/2023 13:58:04 - INFO - __main__ -     step 3900 loss 0.3284
03/02/2023 13:59:39 - INFO - __main__ -     step 4000 loss 0.3271
03/02/2023 14:01:14 - INFO - __main__ -     step 4100 loss 0.3256
03/02/2023 14:02:48 - INFO - __main__ -     step 4200 loss 0.3244
03/02/2023 14:04:22 - INFO - __main__ -     step 4300 loss 0.3234
03/02/2023 14:05:57 - INFO - __main__ -     step 4400 loss 0.3231
03/02/2023 14:07:31 - INFO - __main__ -     step 4500 loss 0.3226
03/02/2023 14:09:05 - INFO - __main__ -     step 4600 loss 0.3214
03/02/2023 14:09:31 - INFO - __main__ -   
***** Running evaluation *****
03/02/2023 14:09:31 - INFO - __main__ -     Num examples = 472
03/02/2023 14:09:31 - INFO - __main__ -     Batch size = 16
03/02/2023 14:09:47 - INFO - __main__ -     eval_ppl = 1.38404
03/02/2023 14:09:47 - INFO - __main__ -     global_step = 4628
03/02/2023 14:09:47 - INFO - __main__ -     train_loss = 0.3213
03/02/2023 14:09:47 - INFO - __main__ -     ********************
03/02/2023 14:09:50 - INFO - __main__ -     Best ppl:1.38404
03/02/2023 14:09:50 - INFO - __main__ -     ********************
03/02/2023 14:28:22 - INFO - __main__ -     bleu-4 = 37.39 
03/02/2023 14:28:22 - INFO - __main__ -     xMatch = 0.0 
03/02/2023 14:28:22 - INFO - __main__ -     ********************
03/02/2023 14:28:22 - INFO - __main__ -     Best bleu:37.39
03/02/2023 14:28:22 - INFO - __main__ -     ********************
03/02/2023 14:29:35 - INFO - __main__ -     step 4700 loss 0.3044
03/02/2023 14:31:12 - INFO - __main__ -     step 4800 loss 0.3062
03/02/2023 14:32:48 - INFO - __main__ -     step 4900 loss 0.3081
03/02/2023 14:34:24 - INFO - __main__ -     step 5000 loss 0.3093
03/02/2023 14:36:00 - INFO - __main__ -     step 5100 loss 0.3092
03/02/2023 14:37:37 - INFO - __main__ -     step 5200 loss 0.3079
03/02/2023 14:39:12 - INFO - __main__ -     step 5300 loss 0.3064
03/02/2023 14:40:44 - INFO - __main__ -     step 5400 loss 0.306
03/02/2023 14:42:16 - INFO - __main__ -     step 5500 loss 0.3058
03/02/2023 14:43:48 - INFO - __main__ -     step 5600 loss 0.3055
03/02/2023 14:45:19 - INFO - __main__ -     step 5700 loss 0.3055
03/02/2023 14:46:36 - INFO - __main__ -   
***** Running evaluation *****
03/02/2023 14:46:36 - INFO - __main__ -     Num examples = 472
03/02/2023 14:46:36 - INFO - __main__ -     Batch size = 16
03/02/2023 14:46:51 - INFO - __main__ -     eval_ppl = 1.38155
03/02/2023 14:46:51 - INFO - __main__ -     global_step = 5785
03/02/2023 14:46:51 - INFO - __main__ -     train_loss = 0.3049
03/02/2023 14:46:51 - INFO - __main__ -     ********************
03/02/2023 14:46:54 - INFO - __main__ -     Best ppl:1.38155
03/02/2023 14:46:54 - INFO - __main__ -     ********************
03/02/2023 15:06:32 - INFO - __main__ -     bleu-4 = 37.45 
03/02/2023 15:06:32 - INFO - __main__ -     xMatch = 0.0 
03/02/2023 15:06:32 - INFO - __main__ -     ********************
03/02/2023 15:06:32 - INFO - __main__ -     Best bleu:37.45
03/02/2023 15:06:32 - INFO - __main__ -     ********************
T5ForConditionalGeneration :  /home/ysnamgoong42/miniconda3/envs/xlcost/lib/python3.8/site-packages/transformers/models/t5/modeling_t5.py
03/02/2023 15:07:05 - INFO - __main__ -   Namespace(adam_epsilon=1e-08, beam_size=5, config_name='Salesforce/codet5-base', dev_filename=None, do_eval=False, do_lower_case=False, do_test=True, do_train=False, eval_batch_size=16, eval_steps=-1, gradient_accumulation_steps=1, learning_rate=5e-05, load_model_path='/home/ysnamgoong42/ws/XLCoST/codet5_nl_pl_program/desc-Python/checkpoint-best-ppl/pytorch_model.bin', local_rank=-1, max_grad_norm=1.0, max_source_length=400, max_steps=-1, max_target_length=400, model_name_or_path='Salesforce/codet5-base', model_type='codet5', no_cuda=False, num_train_epochs=3.0, output_dir='/home/ysnamgoong42/ws/XLCoST/codet5_nl_pl_program/desc-Python', seed=42, test_filename='/home/ysnamgoong42/ws/XLCoST/g4g/XLCoST_data/pair_data_tok_full_desc_comment/Python-desc/test-Python-desc-tok.txt,/home/ysnamgoong42/ws/XLCoST/g4g/XLCoST_data/pair_data_tok_full_desc_comment/Python-desc/test-Python-desc-tok.py', tokenizer_name='Salesforce/codet5-base', train_batch_size=8, train_filename=None, train_steps=-1, warmup_steps=0, weight_decay=0.0)
03/02/2023 15:07:06 - WARNING - __main__ -   Process rank: -1, device: cuda, n_gpu: 4, distributed training: False
03/02/2023 15:07:15 - INFO - __main__ -   reload model from /home/ysnamgoong42/ws/XLCoST/codet5_nl_pl_program/desc-Python/checkpoint-best-ppl/pytorch_model.bin
03/02/2023 15:07:17 - INFO - __main__ -   Test file: /home/ysnamgoong42/ws/XLCoST/g4g/XLCoST_data/pair_data_tok_full_desc_comment/Python-desc/test-Python-desc-tok.txt,/home/ysnamgoong42/ws/XLCoST/g4g/XLCoST_data/pair_data_tok_full_desc_comment/Python-desc/test-Python-desc-tok.py
T5ForConditionalGeneration :  /home/ysnamgoong42/miniconda3/envs/xlcost/lib/python3.8/site-packages/transformers/models/t5/modeling_t5.py
  0%|          | 0/56 [00:00<?, ?it/s]  2%|▏         | 1/56 [00:13<11:55, 13.01s/it]  4%|▎         | 2/56 [00:28<12:54, 14.33s/it]  5%|▌         | 3/56 [00:45<13:47, 15.61s/it]  7%|▋         | 4/56 [01:04<14:39, 16.91s/it]  9%|▉         | 5/56 [01:25<15:38, 18.41s/it] 11%|█         | 6/56 [01:46<16:14, 19.49s/it] 12%|█▎        | 7/56 [02:11<17:15, 21.13s/it] 14%|█▍        | 8/56 [02:37<18:16, 22.84s/it] 16%|█▌        | 9/56 [03:08<19:40, 25.11s/it] 18%|█▊        | 10/56 [03:38<20:31, 26.78s/it] 20%|█▉        | 11/56 [04:11<21:28, 28.64s/it] 21%|██▏       | 12/56 [04:45<22:14, 30.33s/it] 23%|██▎       | 13/56 [05:22<23:03, 32.18s/it] 25%|██▌       | 14/56 [06:01<24:00, 34.29s/it] 27%|██▋       | 15/56 [06:42<24:52, 36.41s/it] 29%|██▊       | 16/56 [07:22<24:53, 37.33s/it] 30%|███       | 17/56 [08:06<25:39, 39.47s/it] 32%|███▏      | 18/56 [08:49<25:38, 40.48s/it] 34%|███▍      | 19/56 [09:32<25:30, 41.36s/it] 36%|███▌      | 20/56 [10:22<26:18, 43.84s/it] 38%|███▊      | 21/56 [11:16<27:24, 47.00s/it] 39%|███▉      | 22/56 [12:02<26:22, 46.55s/it] 41%|████      | 23/56 [12:52<26:13, 47.69s/it] 43%|████▎     | 24/56 [13:44<26:07, 48.99s/it] 45%|████▍     | 25/56 [14:38<26:00, 50.35s/it] 46%|████▋     | 26/56 [15:33<25:54, 51.82s/it] 48%|████▊     | 27/56 [16:30<25:47, 53.37s/it] 50%|█████     | 28/56 [17:29<25:39, 54.97s/it] 52%|█████▏    | 29/56 [18:27<25:11, 55.98s/it] 54%|█████▎    | 30/56 [19:29<25:06, 57.95s/it] 55%|█████▌    | 31/56 [20:33<24:48, 59.56s/it] 57%|█████▋    | 32/56 [21:38<24:27, 61.15s/it] 59%|█████▉    | 33/56 [22:45<24:08, 62.98s/it] 61%|██████    | 34/56 [23:53<23:42, 64.67s/it] 62%|██████▎   | 35/56 [25:04<23:17, 66.53s/it] 64%|██████▍   | 36/56 [26:16<22:43, 68.19s/it] 66%|██████▌   | 37/56 [27:30<22:06, 69.82s/it] 68%|██████▊   | 38/56 [28:44<21:19, 71.11s/it] 70%|██████▉   | 39/56 [30:01<20:38, 72.85s/it] 71%|███████▏  | 40/56 [31:20<19:52, 74.54s/it] 73%|███████▎  | 41/56 [32:37<18:50, 75.39s/it] 75%|███████▌  | 42/56 [33:58<17:58, 77.03s/it] 77%|███████▋  | 43/56 [35:21<17:03, 78.76s/it] 79%|███████▊  | 44/56 [36:44<16:03, 80.26s/it] 80%|████████  | 45/56 [38:10<15:00, 81.90s/it] 82%|████████▏ | 46/56 [39:35<13:49, 82.97s/it] 84%|████████▍ | 47/56 [41:04<12:42, 84.69s/it] 86%|████████▌ | 48/56 [42:34<11:29, 86.24s/it] 88%|████████▊ | 49/56 [44:07<10:17, 88.26s/it] 89%|████████▉ | 50/56 [45:40<08:58, 89.79s/it] 91%|█████████ | 51/56 [47:15<07:36, 91.33s/it] 93%|█████████▎| 52/56 [48:52<06:11, 92.90s/it] 95%|█████████▍| 53/56 [50:31<04:44, 94.73s/it] 96%|█████████▋| 54/56 [52:11<03:12, 96.50s/it] 98%|█████████▊| 55/56 [53:53<01:38, 98.10s/it]100%|██████████| 56/56 [55:32<00:00, 98.30s/it]100%|██████████| 56/56 [55:32<00:00, 59.51s/it]
03/02/2023 16:02:51 - INFO - __main__ -     bleu-4 = 39.25 
03/02/2023 16:02:51 - INFO - __main__ -     xMatch = 0.0 
03/02/2023 16:02:51 - INFO - __main__ -     ********************
tokenizer.decode(top_preds[0]): def findMinSum ( arr , N ) : NEW_LINE INDENT mp = { } NEW_LINE for i in range ( N ) : NEW_LINE INDENT sum = 0 NEW_LINE for j in range ( i + 1 , N ) : NEW_LINE INDENT sum += arr [ j ] NEW_LINE mp [ arr [ j ] ] += 1 NEW_LINE DEDENT sum = min ( sum , mp [ arr [ i ] ] ) NEW_LINE DEDENT return sum NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE N = len ( arr ) NEW_LINE print ( findMinSum ( arr , N ) ) NEW_LINE
tokenizer.decode(top_preds[0]): import math NEW_LINE def binaryToBinary ( n ) : NEW_LINE INDENT arr = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 0 , int ( math . log2 ( n ) ) + 1 ) : NEW_LINE INDENT arr [ i ] = int ( math . log2 ( n % 2 ) + 1 ) NEW_LINE DEDENT return arr NEW_LINE DEDENT def binaryToDecimal ( n ) : NEW_LINE INDENT arr = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( 0 , len ( arr ) ) : NEW_LINE INDENT arr [ i ] = int ( arr [ i ] ) NEW_LINE DEDENT return arr NEW_LINE DEDENT def concatenate ( a , b , k ) : NEW_LINE INDENT n = binaryToBinary ( a ) NEW_LINE n = binaryToBinary ( b ) NEW_LINE k = int ( math . log2 ( k ) + 1 ) NEW_LINE a = binaryToBinary ( a ) NEW_LINE b = binaryToBinary ( b ) NEW_LINE if ( n < k ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT return a NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 0 ] * ( k + 1 ) NEW_LINE b = [ 0 ] * ( k + 1 ) NEW_LINE print ( concatenate ( a , b , k ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): import math NEW_LINE def convert ( N ) : NEW_LINE INDENT v = [ ] NEW_LINE while ( N > 0 ) : NEW_LINE INDENT v . append ( int ( N % 10 ) ) NEW_LINE N //= 10 NEW_LINE DEDENT if ( N == 0 ) : NEW_LINE INDENT return [ ] NEW_LINE DEDENT v . reverse ( ) NEW_LINE v . append ( 0 ) NEW_LINE v . reverse ( ) NEW_LINE v . reverse ( ) NEW_LINE v . reverse ( ) NEW_LINE return v NEW_LINE DEDENT def countNumbers ( A , B , C ) : NEW_LINE INDENT v = convert ( A [ 0 ] ) NEW_LINE if ( len ( v ) == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT v = convert ( v [ : : - 1 ] ) NEW_LINE lower = [ 0 for i in range ( len ( v ) ) ] NEW_LINE for i in range ( len ( v ) ) : NEW_LINE INDENT if ( v [ i ] == 0 ) : NEW_LINE INDENT lower [ i ] = 0 NEW_LINE DEDENT else : NEW_LINE INDENT lower [ i ] = 0 NEW_LINE DEDENT DEDENT for i in range ( len ( v ) ) : NEW_LINE INDENT if ( v [ i ] == 0 ) : NEW_LINE INDENT lower [ i ] = lower [ i - 1 ] + 1 NEW_LINE DEDENT else : NEW_LINE INDENT lower [ i ] = lower [ i - 1 ] + 1 NEW_LINE DEDENT DEDENT return lower [ B - 1 ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 1 , 2 , 3 , 4 ] NEW_LINE B = len ( A ) NEW_LINE C = 2 NEW_LINE print ( countNumbers
tokenizer.decode(top_preds[0]): def isValid ( time ) : NEW_LINE INDENT flag = 0 NEW_LINE for i in range ( len ( time ) ) : NEW_LINE INDENT if ( time [ i ] == ' ? ' ) : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if ( flag == 1 ) : NEW_LINE INDENT print ( " Invalid " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Invalid " ) NEW_LINE DEDENT DEDENT def isValid ( time , L , R ) : NEW_LINE INDENT hour = abs ( time - L ) NEW_LINE minute = abs ( time - R ) NEW_LINE flag = 0 NEW_LINE for i in range ( len ( time ) ) : NEW_LINE INDENT if ( isValid ( time [ i ] ) ) : NEW_LINE INDENT flag = 1 NEW_LINE break NEW_LINE DEDENT DEDENT if ( flag == 0 ) : NEW_LINE INDENT print ( " Invalid " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Invalid " ) NEW_LINE DEDENT DEDENT def findTime ( time , L , R ) : NEW_LINE INDENT hour = abs ( time - L ) NEW_LINE minute = abs ( time - R ) NEW_LINE if ( isValid ( hour ) ) : NEW_LINE INDENT print ( " Invalid " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Invalid " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT L , R = 23 , 59 NEW_LINE findTime ( time , L , R ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): import math NEW_LINE def maxIntersections ( x1 , y1 , x2 , y2 ) : NEW_LINE INDENT circles = math . sqrt ( x1 * x2 + y1 * y2 ) NEW_LINE straightlines = math . sqrt ( x1 * x2 + y1 * y2 ) NEW_LINE return max ( circles , straightlines ) NEW_LINE DEDENT x1 = 3 NEW_LINE y1 = 4 NEW_LINE print ( maxIntersections ( x1 , y1 , x2 , y2 ) ) NEW_LINE
tokenizer.decode(top_preds[0]): def isUdulating ( n ) : NEW_LINE INDENT if ( n < 10 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( n % 10 == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n % 10 == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT if ( n % 10 == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 12345 NEW_LINE if ( isUdulating ( n ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
tokenizer.decode(top_preds[0]): import math NEW_LINE def findKthSetBit ( n ) : NEW_LINE INDENT k = int ( math . log2 ( n ) ) + 1 NEW_LINE return math . floor ( math . log2 ( n ) ) NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 10 NEW_LINE print ( findKthSetBit ( n ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def leftRotate ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = arr [ i - 1 ] NEW_LINE DEDENT DEDENT def rightRotate ( arr , n , d ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT arr [ i ] = arr [ i - d ] NEW_LINE DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " ▁ " ) NEW_LINE DEDENT DEDENT def printArray ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " ▁ " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE printArray ( arr , n ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def smallestMissing ( arr , n ) : NEW_LINE INDENT low = 0 NEW_LINE high = n - 1 NEW_LINE while ( low <= high ) : NEW_LINE INDENT mid = low + ( high - low ) // 2 NEW_LINE if ( arr [ mid ] == 0 ) : NEW_LINE INDENT low = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT high = mid - 1 NEW_LINE DEDENT DEDENT return low NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( smallestMissing ( arr , n ) ) NEW_LINE
tokenizer.decode(top_preds[0]): MAX_CHAR = 256 NEW_LINE dp = [ [ [ - 1 for x in range ( MAX_CHAR ) ] for y in range ( MAX_CHAR ) ] for z in range ( MAX_CHAR ) ] NEW_LINE def lcs ( str1 , str2 , i , j ) : NEW_LINE INDENT if ( i > len1 or j > len2 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if ( dp [ i ] [ j ] != - 1 ) : NEW_LINE INDENT return dp [ i ] [ j ] NEW_LINE DEDENT if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) : NEW_LINE INDENT return lcs ( str1 , str2 , i + 1 , j ) NEW_LINE DEDENT else : NEW_LINE INDENT return lcs ( str1 , str2 , i + 1 , j ) NEW_LINE DEDENT DEDENT def printLCS ( str1 , str2 , lcslen ) : NEW_LINE INDENT currlcs = lcslen NEW_LINE if ( currlcs == lcslen ) : NEW_LINE INDENT return dp [ i ] [ j ] NEW_LINE DEDENT if ( dp [ i ] [ j ] != - 1 ) : NEW_LINE INDENT return dp [ i ] [ j ] NEW_LINE DEDENT if ( dp [ i ] [ j ] != - 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ j ] + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ j ] + 1 ) NEW_LINE DEDENT DEDENT DEDENT def printLCS ( str1 , str2 ) : NEW_LINE INDENT len1 =
tokenizer.decode(top_preds[0]): def numberOfWays ( n ) : NEW_LINE INDENT fac1 = ( n - 1 ) ; NEW_LINE fac2 = ( n - 1 ) ; NEW_LINE fac3 = ( n - 2 ) ; NEW_LINE fac4 = ( n - 3 ) ; NEW_LINE fac5 = ( n - 4 ) ; NEW_LINE fac6 = ( n - 5 ) ; NEW_LINE ways = fac1 * fac2 ; NEW_LINE print ( ways ) ; NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 ; NEW_LINE numberOfWays ( n ) ; NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): import random NEW_LINE def power ( x , y , p ) : NEW_LINE INDENT res = 1 NEW_LINE x = x % p NEW_LINE while ( y > 0 ) : NEW_LINE INDENT if ( y & 1 ) : NEW_LINE INDENT res = ( res * x ) % p NEW_LINE DEDENT x = ( x * x ) % p NEW_LINE DEDENT return res NEW_LINE DEDENT def modExp ( x , y , p ) : NEW_LINE INDENT while ( y > 0 ) : NEW_LINE INDENT if ( y & 1 ) : NEW_LINE INDENT res = ( res * x ) % p NEW_LINE DEDENT x = ( x * x ) % p NEW_LINE DEDENT return res NEW_LINE DEDENT def isComposite ( n , d , k ) : NEW_LINE INDENT if ( n > 4 ) : NEW_LINE INDENT return False NEW_LINE DEDENT a = random . randint ( 2 , n - 2 ) NEW_LINE x = ( a * x ) % n NEW_LINE while ( d > 0 ) : NEW_LINE INDENT x = ( x * x ) % n NEW_LINE d = d >> 1 NEW_LINE x = ( x * x ) % n NEW_LINE DEDENT return isComposite ( n , d , k ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 NEW_LINE k = 3 NEW_LINE if ( isComposite ( n , k ) ) : NEW_LINE INDENT print ( " Composite " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " Not ▁ a ▁ composite " ) NEW_LINE DEDENT DEDENT
tokenizer.decode(top_preds[0]): def countTriplets ( A , N ) : NEW_LINE INDENT cnt = 0 NEW_LINE mp = { } NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( i + 1 , N ) : NEW_LINE INDENT mp [ A [ i ] & A [ j ] ] += 1 NEW_LINE DEDENT DEDENT for i in range ( N ) : NEW_LINE INDENT for j in range ( i + 1 , N ) : NEW_LINE INDENT if ( mp [ A [ i ] & A [ j ] ] == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT DEDENT return cnt NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 1 , 2 , 3 , 4 ] NEW_LINE N = len ( A ) NEW_LINE print ( countTriplets ( A , N ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): import math NEW_LINE def areaOfSector ( x1 , y1 , x2 , y2 ) : NEW_LINE INDENT area = math . sqrt ( x1 * x2 + y1 * y2 ) NEW_LINE return area NEW_LINE DEDENT x1 = 1 NEW_LINE y1 = 2 NEW_LINE x2 = 3 NEW_LINE y2 = 4 NEW_LINE print ( " Area ▁ of ▁ the ▁ Circular ▁ Sector : ▁ " , areaOfSector ( x1 , y1 , x2 , y2 ) ) NEW_LINE
tokenizer.decode(top_preds[0]): def findMinSwaps ( N , P ) : NEW_LINE INDENT new_arr = [ 0 ] * ( N + 1 ) NEW_LINE count = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT new_arr [ i ] = 1 NEW_LINE DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT if ( P [ i ] [ 0 ] == ' X ' ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT if ( P [ i ] [ 0 ] == ' X ' ) : NEW_LINE INDENT new_arr [ i ] = new_arr [ i - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT new_arr [ i ] = new_arr [ i - 1 ] NEW_LINE DEDENT DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT print ( count ) NEW_LINE DEDENT DEDENT N = 3 NEW_LINE P = [ 1 , 2 , 3 ] NEW_LINE findMinSwaps ( N , P ) NEW_LINE
tokenizer.decode(top_preds[0]): def lis ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( arr [ j ] < arr [ i ] ) : NEW_LINE INDENT lis ( arr , j ) NEW_LINE DEDENT DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( arr [ i ] < arr [ j ] ) : NEW_LINE INDENT lis ( arr , i , j ) NEW_LINE DEDENT DEDENT DEDENT DEDENT def findLIS ( arr , n ) : NEW_LINE INDENT arr = [ 0 ] * n NEW_LINE for i in range ( n ) : NEW_LINE INDENT arr [ i ] = arr [ i ] + arr [ i - 1 ] NEW_LINE DEDENT return lis ( arr , n ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findLIS ( arr , n ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def seriesSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += i * i * i NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 5 NEW_LINE print ( seriesSum ( n ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def sortArray ( arr , n , a , b ) : NEW_LINE INDENT start = a NEW_LINE end = b NEW_LINE arr . sort ( ) NEW_LINE for i in range ( a , end + 1 ) : NEW_LINE INDENT print ( arr [ i ] , end = " ▁ " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE a = 1 NEW_LINE b = 2 NEW_LINE sortArray ( arr , n , a , b ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def maxSquare ( a , b , c ) : NEW_LINE INDENT return ( a * b + c * c ) NEW_LINE DEDENT a = 2 NEW_LINE b = 3 NEW_LINE c = 5 NEW_LINE print ( maxSquare ( a , b , c ) ) NEW_LINE
tokenizer.decode(top_preds[0]): n = 4 NEW_LINE m = 4 NEW_LINE def countSets ( mat ) : NEW_LINE INDENT ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT if ( mat [ i ] [ j ] == '1' ) : NEW_LINE INDENT ans += n * m NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT mat = [ [ 0 for i in range ( m ) ] for j in range ( n ) ] NEW_LINE print ( countSets ( mat ) ) NEW_LINE
tokenizer.decode(top_preds[0]): def pathCountDPRecDP ( m , n , k ) : NEW_LINE INDENT if ( m == 0 or n == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( m == 0 or n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( m == 0 or n == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( k == 1 ) : NEW_LINE INDENT return pathCountDPRecDP ( m - 1 , n , k ) + pathCountDPRecDP ( m - 1 , n - 1 , k ) NEW_LINE DEDENT else : NEW_LINE INDENT return pathCountDPRecDP ( m - 1 , n - 1 , k ) NEW_LINE DEDENT DEDENT def pathCountDP ( m , n , k ) : NEW_LINE INDENT return pathCountDPRecDP ( m , n , k ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT m = 3 NEW_LINE n = 5 NEW_LINE k = 2 NEW_LINE print ( " Number ▁ of ▁ paths ▁ with ▁ exactly ▁ " , " coins ▁ = ▁ " , k , " ▁ = ▁ " , pathCountDP ( m , n , k ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def addNumbers ( x , y ) : NEW_LINE INDENT carry = 0 NEW_LINE while ( carry != 0 ) : NEW_LINE INDENT x = x ^ carry NEW_LINE carry = carry >> 1 NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( 32 ) : NEW_LINE INDENT sum = sum + x NEW_LINE DEDENT return sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT x = 10 NEW_LINE y = 10 NEW_LINE print ( addNumbers ( x , y ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def findPrefixXOR ( L , R ) : NEW_LINE INDENT pre = [ 0 ] * ( L + 1 ) NEW_LINE for i in range ( 1 , R + 1 ) : NEW_LINE INDENT pre [ i ] = pre [ i - 1 ] ^ pre [ i - 2 ] NEW_LINE DEDENT for i in range ( 1 , L + 1 ) : NEW_LINE INDENT pre [ i ] = pre [ i - 1 ] ^ pre [ i - 1 ] NEW_LINE DEDENT for i in range ( 1 , R + 1 ) : NEW_LINE INDENT pre [ i ] = pre [ i - 1 ] ^ pre [ i - 1 ] NEW_LINE DEDENT return pre [ R ] NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT L = 1 NEW_LINE R = 2 NEW_LINE print ( findPrefixXOR ( L , R ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def reverseArray ( arr , s , e ) : NEW_LINE INDENT for i in range ( s , e + 1 ) : NEW_LINE INDENT arr [ i ] , arr [ i + 1 ] = arr [ i ] , arr [ i + 1 ] NEW_LINE DEDENT DEDENT def generateRotations ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " ▁ " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE generateRotations ( arr , n ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def maximumABs ( s , n ) : NEW_LINE INDENT A = 0 NEW_LINE B = 0 NEW_LINE AB = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == ' A ' and s [ i + 1 ] == ' B ' ) : NEW_LINE INDENT A += 1 NEW_LINE B += 1 NEW_LINE DEDENT else : NEW_LINE INDENT AB += 1 NEW_LINE DEDENT DEDENT ans = AB NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] == ' B ' and s [ i + 1 ] == ' A ' ) : NEW_LINE INDENT B += 1 NEW_LINE DEDENT else : NEW_LINE INDENT if ( s [ i ] == ' A ' and s [ i + 1 ] == ' B ' ) : NEW_LINE INDENT A += 1 NEW_LINE DEDENT else : NEW_LINE INDENT A += 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " AABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBABBBABBBABBBABBABBABB
tokenizer.decode(top_preds[0]): def longestSubsequence ( arr , n ) : NEW_LINE INDENT for x in range ( n ) : NEW_LINE INDENT arr [ x ] = arr [ x - 1 ] NEW_LINE x -= 1 NEW_LINE DEDENT count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] != arr [ i - 1 ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT print ( count ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE longestSubsequence ( arr , n ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def countSubsets ( arr , n , k ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE ans = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( arr [ i ] + arr [ j ] < k ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT DEDENT DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE k = 2 NEW_LINE print ( countSubsets ( arr , n , k ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def countPairs ( arr , N ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( i + 1 , N ) : NEW_LINE INDENT if ( arr [ i ] % arr [ j ] == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 ] NEW_LINE N = len ( arr ) NEW_LINE print ( countPairs ( arr , N ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def possible ( A , B , n , x , y ) : NEW_LINE INDENT if ( n < x or n < y ) : NEW_LINE INDENT return False NEW_LINE DEDENT A . sort ( ) NEW_LINE B . sort ( ) NEW_LINE if ( A [ n - 1 ] < B [ n - 1 ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT A . sort ( ) NEW_LINE B . sort ( ) NEW_LINE if ( possible ( A , B , n , x , y ) ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def minimumOperations ( arr , N ) : NEW_LINE INDENT prefix_sum = [ 0 ] * N NEW_LINE for i in range ( N ) : NEW_LINE INDENT prefix_sum [ i ] = prefix_sum [ i ] + arr [ i ] NEW_LINE DEDENT max_sum = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( i + 1 , N ) : NEW_LINE INDENT if ( prefix_sum [ j ] == prefix_sum [ i ] ) : NEW_LINE INDENT group_sum [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT group_sum [ i ] -= 1 NEW_LINE DEDENT DEDENT max_sum = max ( max_sum , group_sum [ i ] ) NEW_LINE DEDENT return max_sum NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE N = len ( arr ) NEW_LINE print ( minimumOperations ( arr , N ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def printRightShifts ( A , N ) : NEW_LINE INDENT shifts = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT if ( A [ i ] > A [ i + 1 ] ) : NEW_LINE INDENT shifts += 1 NEW_LINE DEDENT DEDENT print ( shifts ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 1 , 2 , 3 , 4 ] NEW_LINE N = len ( A ) NEW_LINE printRightShifts ( A , N ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): from collections import defaultdict NEW_LINE def smallestString ( s ) : NEW_LINE INDENT mp = defaultdict ( int ) NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT mp [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT cnt = 0 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if ( mp [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif ( mp [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 1 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif ( mp [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 2 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif ( mp [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif ( mp [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 1 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT elif ( mp [ ord ( s [ i ] ) - ord ( ' a ' ) ] == 2 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT DEDENT return s NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " geeksforgeeks " NEW_LINE print ( smallestString ( s ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): from collections import defaultdict NEW_LINE def check ( sm1 , sm2 , sm3 , n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if ( sm1 == - 1 or sm2 == - 1 or sm3 == - 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( sm1 [ i ] + sm2 [ j ] == sm3 [ j ] + sm1 [ i ] ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT DEDENT DEDENT return 0 NEW_LINE DEDENT def partitionArray ( arr , n ) : NEW_LINE INDENT sm1 = defaultdict ( lambda : 0 ) NEW_LINE sm2 = defaultdict ( lambda : 0 ) NEW_LINE sm2 = defaultdict ( lambda : 0 ) NEW_LINE sm3 = defaultdict ( lambda : 0 ) NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT sm1 [ i ] += arr [ i ] NEW_LINE sm2 [ i ] += arr [ i ] NEW_LINE DEDENT sm3 [ n ] = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT sm3 [ i ] += arr [ i ] NEW_LINE DEDENT for i in range ( 0 , n ) : NEW_LINE INDENT if ( sm1 [ i ] + sm2 [ i ] == sm3 [ i ] ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT DEDENT return 0 NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE if ( partitionArray ( arr ,
tokenizer.decode(top_preds[0]): def maxSubArraySum ( a , n , k ) : NEW_LINE INDENT maxSubArraySum = 0 NEW_LINE for i in range ( 0 , n - 1 ) : NEW_LINE INDENT maxSubArraySum = max ( maxSubArraySum , a [ i ] + a [ i + 1 ] ) NEW_LINE DEDENT return maxSubArraySum NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT a = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( a ) NEW_LINE k = 2 NEW_LINE print ( maxSubArraySum ( a , n , k ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def printPalindrome ( S ) : NEW_LINE INDENT Hash = { } NEW_LINE for ch in S : NEW_LINE INDENT Hash [ ord ( ch ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT st = set ( ) NEW_LINE for ch in range ( ' a ' , ' z ' ) : NEW_LINE INDENT if ( Hash [ ch ] == 2 ) : NEW_LINE INDENT st . add ( ch ) NEW_LINE DEDENT DEDENT for i in range ( ' a ' , ' z ' ) : NEW_LINE INDENT st . add ( ch ) NEW_LINE DEDENT if ( Hash [ i ] >= 3 ) : NEW_LINE INDENT for j in range ( ' a ' , ' z ' ) : NEW_LINE INDENT st . add ( ch ) NEW_LINE DEDENT DEDENT for i in range ( ' a ' , ' z ' ) : NEW_LINE INDENT st . add ( ch ) NEW_LINE DEDENT for i in range ( ' a ' , ' z ' ) : NEW_LINE INDENT st . add ( ch ) NEW_LINE DEDENT for i in range ( ' a ' , ' z ' ) : NEW_LINE INDENT for j in range ( ' a ' , ' z ' ) : NEW_LINE INDENT if ( Hash [ j ] > 0 ) : NEW_LINE INDENT st . add ( ch ) NEW_LINE DEDENT DEDENT for i in range ( ' a ' , ' z ' ) : NEW_LINE INDENT st . add ( ch ) NEW_LINE DEDENT print ( st ) NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT S = " geeksforgeeks " NEW_LINE printPalindrome ( S ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): from collections import defaultdict NEW_LINE def encrypt ( s , x ) : NEW_LINE INDENT n = len ( s ) NEW_LINE x = x // 26 NEW_LINE count = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( ord ( s [ i ] ) - ord ( ' a ' ) == x ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count -= 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT s = " geeksforgeeks " NEW_LINE print ( encrypt ( s , x ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def countWords ( str ) : NEW_LINE INDENT a = str . split ( " ▁ " ) NEW_LINE count = 0 NEW_LINE for i in range ( len ( a ) ) : NEW_LINE INDENT if ( str [ i ] == str [ i + 1 ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT str = " Geeks ▁ for ▁ Geeks " NEW_LINE print ( countWords ( str ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def circleArea ( r ) : NEW_LINE INDENT if ( r < 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT area = ( 2 * r * r ) NEW_LINE return area NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT r = 5 NEW_LINE print ( circleArea ( r ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def findSubset ( N ) : NEW_LINE INDENT count = [ 0 ] * ( N + 1 ) NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT count [ i ] = count [ i - 1 ] + 1 NEW_LINE DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT count [ i ] = count [ i - 1 ] + 1 NEW_LINE DEDENT minDiff = 0 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT if ( count [ i ] == 1 ) : NEW_LINE INDENT minDiff = min ( minDiff , count [ i ] - count [ i - 1 ] ) NEW_LINE DEDENT DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT if ( count [ i ] == 1 ) : NEW_LINE INDENT minDiff = min ( minDiff , count [ i ] - count [ i - 1 ] ) NEW_LINE DEDENT DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT if ( count [ i ] == 1 ) : NEW_LINE INDENT minDiff = min ( minDiff , count [ i ] - count [ i - 1 ] ) NEW_LINE DEDENT DEDENT for i in range ( 1 , N + 1 ) : NEW_LINE INDENT print ( minDiff , end = " ▁ " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 3 NEW_LINE findSubset ( N ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): import math NEW_LINE def productOfPairs ( arr , n ) : NEW_LINE INDENT product = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT product *= ( arr [ i ] * arr [ j ] ) NEW_LINE DEDENT DEDENT return product NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE print ( productOfPairs ( arr , n ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def isPossible ( x , y ) : NEW_LINE INDENT if ( x == 0 and y == 0 ) : NEW_LINE INDENT print ( " YES " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " NO " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT x = 2 NEW_LINE y = 3 NEW_LINE isPossible ( x , y ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def checkPoint ( x1 , y1 , x2 , y2 , x3 , y3 ) : NEW_LINE INDENT if ( x1 >= x2 and y1 >= y3 ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT elif ( x1 >= x2 and y1 >= y3 ) : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT elif ( x1 >= x3 and y1 >= y3 ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT elif ( x1 >= x2 and y1 <= y3 ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT elif ( x1 >= x3 and y1 >= y3 ) : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT elif ( x1 >= x3 and y1 <= y3 ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT x1 = 1 NEW_LINE y1 = 2 NEW_LINE x2 = 2 NEW_LINE y2 = 3 NEW_LINE x3 = 2 NEW_LINE y3 = 3 NEW_LINE x4 = 2 NEW_LINE y4 = 2 NEW_LINE x5 = 2 NEW_LINE y5 = 2 NEW_LINE x4 = 2 NEW_LINE y4 = 2 NEW_LINE if ( checkPoint ( x1 , y1 , x2 , y3 , x4 , y4 ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
tokenizer.decode(top_preds[0]): def maxSubarraySum ( arr , N , K ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( N ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT ans = 0 NEW_LINE if ( K == 1 ) : NEW_LINE INDENT ans = max ( ans , sum ) NEW_LINE DEDENT else : NEW_LINE INDENT ans = max ( ans , sum ) NEW_LINE DEDENT return ans NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE N = len ( arr ) NEW_LINE K = 2 NEW_LINE print ( maxSubarraySum ( arr , N , K ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): from math import sqrt NEW_LINE def countPrimeFactors ( n ) : NEW_LINE INDENT cnt = 0 NEW_LINE while ( n % 2 == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE n = n // 2 NEW_LINE DEDENT for i in range ( 3 , int ( sqrt ( n ) ) + 1 , 2 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT for i in range ( 3 , int ( sqrt ( n ) ) + 1 , 2 ) : NEW_LINE INDENT if ( n % i == 0 ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT return cnt NEW_LINE DEDENT def getSum ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 2 , int ( sqrt ( n ) ) + 1 , 1 ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT if ( sum >= n ) : NEW_LINE INDENT print ( " No " ) NEW_LINE return NEW_LINE DEDENT return NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 12 NEW_LINE K = 2 NEW_LINE getSum ( N ) NEW_LINE if ( getSum ( N ) >= N ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
tokenizer.decode(top_preds[0]): from math import log2 NEW_LINE def compare ( x , y ) : NEW_LINE INDENT dp = [ 0 ] * ( x + 1 ) NEW_LINE dp [ 0 ] = x NEW_LINE dp [ 1 ] = y NEW_LINE for i in range ( 2 , x + 1 ) : NEW_LINE INDENT for j in range ( 2 , y + 1 ) : NEW_LINE INDENT dp [ i ] = max ( dp [ i - 1 ] , dp [ i - 2 ] ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT x = 5 NEW_LINE y = 3 NEW_LINE print ( compare ( x , y ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def printQuery ( arr , n , queries ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT sum -= arr [ i ] NEW_LINE DEDENT DEDENT for i in range ( queries ) : NEW_LINE INDENT if ( arr [ i ] % 2 == 0 ) : NEW_LINE INDENT print ( arr [ i ] , end = " ▁ " ) NEW_LINE DEDENT DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE queries = [ [ 1 , 2 ] , [ 2 , 3 ] , [ 2 , 3 ] ] NEW_LINE printQuery ( arr , n , queries ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def arePermutations ( arr1 , arr2 , n1 , n2 ) : NEW_LINE INDENT sum = 0 NEW_LINE mul = 1 NEW_LINE for i in range ( n1 ) : NEW_LINE INDENT sum += arr1 [ i ] NEW_LINE mul *= arr2 [ i ] NEW_LINE DEDENT for i in range ( n2 ) : NEW_LINE INDENT sum += arr1 [ i ] NEW_LINE mul *= arr2 [ i ] NEW_LINE DEDENT if ( sum == mul ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr1 = [ 1 , 2 , 3 , 4 ] NEW_LINE arr2 = [ 2 , 3 , 4 , 5 ] NEW_LINE n1 = len ( arr1 ) NEW_LINE n2 = len ( arr2 ) NEW_LINE if arePermutations ( arr1 , arr2 , n1 , n2 ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
tokenizer.decode(top_preds[0]): def average ( n ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT return sum / n NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT n = 3 NEW_LINE print ( average ( n ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def countPairs ( arr , N ) : NEW_LINE INDENT max_element = max ( arr ) NEW_LINE freq = [ 0 ] * ( max_element + 1 ) NEW_LINE for i in range ( 1 , max_element + 1 ) : NEW_LINE INDENT freq [ arr [ i ] ] += 1 NEW_LINE DEDENT pairs = 0 NEW_LINE for i in range ( 1 , max_element + 1 ) : NEW_LINE INDENT for j in range ( i + 1 , max_element + 1 ) : NEW_LINE INDENT if ( freq [ j ] > 1 ) : NEW_LINE INDENT pairs += 1 NEW_LINE DEDENT DEDENT DEDENT return pairs NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE N = len ( arr ) NEW_LINE print ( countPairs ( arr , N ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def minOperations ( m , n ) : NEW_LINE INDENT if ( m < n ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE return NEW_LINE DEDENT if ( m > n ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE INDENT print ( " + 1" ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE INDENT print ( " * 2" ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE INDENT print ( " * 2" ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE INDENT print ( " * 2" ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE INDENT print ( " * 2" ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE INDENT print ( m // 2 ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE INDENT print ( m // 2 ) NEW_LINE return NEW_LINE DEDENT if ( m % 2 == 0 and n % 2 == 0 ) : NEW_LINE
tokenizer.decode(top_preds[0]): import math NEW_LINE def reverseDigits ( num ) : NEW_LINE INDENT rev = 0 NEW_LINE while ( num > 0 ) : NEW_LINE INDENT rev = rev * 10 + ( num % 10 ) NEW_LINE num = num // 10 NEW_LINE DEDENT return rev NEW_LINE DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT num = 12345 NEW_LINE print ( reverseDigits ( num ) ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def isEqual ( arr1 , arr2 ) : NEW_LINE INDENT return ( arr1 [ 0 ] == arr2 [ 0 ] ) NEW_LINE DEDENT def search ( pat , txt ) : NEW_LINE INDENT countP = [ 0 ] * 26 NEW_LINE countTW = [ 0 ] * 26 NEW_LINE for i in range ( len ( pat ) ) : NEW_LINE INDENT countP [ ord ( pat [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE countTW [ ord ( txt [ i ] ) - ord ( ' a ' ) ] -= 1 NEW_LINE DEDENT for i in range ( 26 ) : NEW_LINE INDENT countTW [ ord ( txt [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT for i in range ( 26 ) : NEW_LINE INDENT if ( isEqual ( countP [ i ] , countTW [ i ] ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT if __name__ == " _ _ main _ _ " : NEW_LINE INDENT pat = " geeksforgeeks " NEW_LINE txt = " geeksforgeeks " NEW_LINE if ( search ( pat , txt ) ) : NEW_LINE INDENT print ( " Yes " ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( " No " ) NEW_LINE DEDENT DEDENT
tokenizer.decode(top_preds[0]): import math NEW_LINE def countDiagonal ( n ) : NEW_LINE INDENT return math . ceil ( math . sqrt ( 2 * n * n * n ) ) NEW_LINE DEDENT n = 3 NEW_LINE print ( countDiagonal ( n ) ) NEW_LINE
tokenizer.decode(top_preds[0]): def kthSubString ( s , k ) : NEW_LINE INDENT n = len ( s ) NEW_LINE if ( k > n ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE return NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += s [ i ] NEW_LINE if ( k > sum ) : NEW_LINE INDENT print ( " - 1" ) NEW_LINE return NEW_LINE DEDENT sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += s [ i ] NEW_LINE sum = sum + s [ i - 1 ] NEW_LINE DEDENT start = 0 NEW_LINE end = n - 1 NEW_LINE while ( start <= end ) : NEW_LINE INDENT mid = ( start + end ) // 2 NEW_LINE if ( s [ mid ] == s [ mid + 1 ] ) : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT DEDENT print ( s [ start : mid + 1 ] , end = " ▁ " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = " geeksforgeeks " NEW_LINE k = 2 NEW_LINE kthSubString ( s , k ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def printArr ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " ▁ " ) NEW_LINE DEDENT DEDENT def compare ( arr1 , arr2 ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT str1 = str ( arr1 [ i ] ) NEW_LINE str2 = str ( arr2 [ i ] ) NEW_LINE if ( str1 < str2 ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE DEDENT def printArr ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = " ▁ " ) NEW_LINE DEDENT DEDENT if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr1 = [ 1 , 2 , 3 , 4 , 5 , 6 ] NEW_LINE n = len ( arr1 ) NEW_LINE printArr ( arr1 , n ) NEW_LINE DEDENT
tokenizer.decode(top_preds[0]): def minDiff ( arr , n ) : NEW_LINE INDENT min = arr [ 0 ] NEW_LINE max = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT min = min ( min , arr [ i ] ) NEW_LINE max = max ( max , arr [ i ] ) NEW_LINE DEDENT return min NEW_LINE DEDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minDiff ( arr , n ) ) NEW_LINE
